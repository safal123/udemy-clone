generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String    @id @unique @default(uuid())
  userId      String
  title       String?   @db.Text
  description String?   @db.Text
  imageUri    String?   @db.Text
  price       Float?
  isPublished Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  purchases   Purchase[]
  attachments Attachment[]
  chapters    Chapter[]
  media       Media[]
  author      User         @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
  @@map("courses")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("attachments")
}

model Chapter {
  id             String  @id @default(uuid())
  title          String  @db.Text
  description    String? @db.Text
  order          Int
  isPublished    Boolean @default(false)
  isFree         Boolean @default(false)
  videoUrl       String? @db.Text
  videoStorageId String? @db.Text

  muxData MuxData?

  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  media        Media[]
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@map("chapters")
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String  @unique
  playbackId String? @unique

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@map("mux_data")
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
  @@map("purchases")
}

model User {
  id               String  @id @default(uuid())
  userId           String  @unique
  email            String  @unique
  firstName        String?
  imageUri         String?
  lastName         String?
  stripeCustomerId String
  isTeacher        Boolean @default(false)

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  courses              Course[]
  teacherAccessRequest TeacherAccessRequest[]
  createdMedia         Media[]                @relation("Owner")
  approvedMedia        Media[]                @relation("Approver")

  @@map("users")
}

model TeacherAccessRequest {
  id        String         @id @default(uuid())
  userId    String
  user      User           @relation(fields: [userId], references: [userId])
  status    REQUEST_STATUS @default(REQUESTED_BY_USER)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId])
  @@map("teacher_access_requests")
}

enum REQUEST_STATUS {
  REQUESTED_BY_USER
  REQUESTED_BY_ADMIN
  PENDING
  CANCELLED_BY_USER
  APPROVED_BY_ADMIN
  REJECTED_BY_ADMIN
}

model Media {
  id           String        @id @default(uuid())
  name         String
  storageId    String?       @unique
  type         MediaType     @default(IMAGE)
  size         Int?
  length       Int?
  mimeType     String?
  url          String?       @db.Text
  thumbnailUrl String?       @db.Text
  processedUrl String?       @db.Text
  originalUrl  String?       @db.Text
  status       MediaStatus   @default(UPLOADED)
  quality      MediaQuality?
  isPublic     Boolean       @default(false)
  description  String?
  views        Int           @default(0)
  downloads    Int           @default(0)
  tags         String[]
  latitude     Float?
  longitude    Float?

  courseId   String?
  chapterId  String?
  createdBy  String
  approvedBy String?
  reviewedAt DateTime?

  course   Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapter  Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  owner    User     @relation("Owner", fields: [createdBy], references: [userId])
  approver User?    @relation("Approver", fields: [approvedBy], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([chapterId])
  @@index([createdBy])
  @@index([approvedBy])
  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum MediaStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}

enum MediaQuality {
  LOW
  MEDIUM
  HIGH
}
